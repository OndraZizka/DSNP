IDENTITY INITIALIZATION

A user name and password is requested. These credentials will be used by the
user to login as the owner of the identity.

A URI is requested. This is an internet facing web address that the user has
control of (possibly through a service provider). It represents their identity.

A PGP key is created. The key has no passphrase. The user's URI is used as the
key's user-id. The URI takes the place of the string that is normally comprised
of a real name, a comment and an email address.

The public portion of the key is exported and made available at $URI/id.asc.
This must always be fetched using SSL.

The key's fingerprint $FP is stored for use in the protocol.

OWNER LOGIN

User submits credentials via a web form underneath $URI and recieves a session
cookie that indicates to the server that the user is logged in.

FRIENDSHIP REQUEST

Person requesting friendship:                      friender, $URI,    $FP
Potential friend who is receiving the request:     friendee, $FR-URI, $FR-FP

1. The friender fills in a friend request form at $FR-URI
      a) friender answers a challenge (generic CAPTCHA, or personalized)
      b) friender submits $URI

2. Friendee server processes the request:
      a) verifies challenge response
      b) fetches $URI/id.asc (using SSL)
      c) randomly generates a one-way relationship id ($FR-RELID)
      d) randomly generates a one-way request id ($FR-REQID)
      e) encrypts $FR-RELID to friender and signs it
      f) makes message available at $FR-URI/friend-request/$FR-REQID.asc
      g) redirects the user's browser to $URI/return-relid?uri=$FR-URI&reqid=$FR-REQID

3. Friender server processes the return-relid request:
      a) verifies browser is logged in as owner
      b) fetches $FR-URI/id.asc (using SSL)
      c) fetches $FR-URI/friend-request/$FR-REQID.asc 
      d) decrypts and verifies $FR-RELID
      e) randomly generates $RELID
      f) randomly generates $REQID
      g) encrypts "$FR-RELID $RELID" to friendee and signs it
      h) makes message available at $URI/request-return/$REQID.asc
      i) redirects the friender to $FR-URI/friend-final?uri=$URI&reqid=$REQID

4. Friendee server processes the friend-final request:
      a) fetches $URI/request-return/$REQID.asc 
      b) decrypts and verifies message, must contain correct $FR-RELID
      c) stores request for friendee to accept/deny

At this point friender considers friendee a friend, but not vice versa.

FRIENDSHIP ACCEPT/DENY

The next time the friendee logs in they are presented with the friendship
request. They can either accept or deny the request. The relationship status is
recorded by the friendee's server. No additional communication with the friend
is necessary. The friender will know that friendship request has been approved
when a feed is available.

PUBLISHING TO FRIENDS

For each friend ( $FR-URI, $FR-FP, $FR-RELID ): 
      a) assemble the data they should see
      b) encrypt it to them and sign it 
      c) make it avaialable at $URI/feeds/$RELID.asc

FEED AGGREGATION

For each friend ( $FR-URI, $FR-FP, $FR-RELID ), 
      a) fetch $FR-URI/feeds/$FR-RELID.asc
      b) decrypt and verify feed

LOGIN AS A FRIEND

This allows people to login to a friend's page to see the content that has been
summarized by their feed. It is an open-id style login.

User:     $URI,    $FP,    $RELID
Friend:   $FR-URI, $FR-FP, $FR-RELID

1. User fills in a login-as-friend form
      a) User visits $FR-URI/login-as-friend
      b) submits $URI

2. The friend's server processes the request.
      a) verifies that $URI is a friend
      b) randomly generates a token
      c) encrypts the token to the user and signs it.
      d) makes it available under $FR-URI/tokens/$FR-RELID.asc
      e) redirects user to $URI/return-token?uri=$FR-URI

3. The user's server verifies the user owns the identitiy.
      a) checks that $FR-URI is a friend
      b) if browser is not logged in fails the process (no redirect).
      c) fetches $FR-URI/tokens/$FR-RELID.asc
      d) decrypts and verifies the token
      e) redirects the browser to $FP-URI/submit-token?uri=$URI&token=$TOK

4. Friend login final
      a) Verifies ($URI, $TOK)
      b) grants friend credentials to the browser using cookie-based session.

UNFRIENDING

Options:
 0. No friend-session key. Relies on friends to stop forwarding messages
 1. Use a friend-session key. Gives the sender some control over who can read.
    Requires sending out session key. Does not stop a bad friend from forwarding a session
    key. But the protocol doesn't have this. Session keys must be signed.
 2. Rolling relationship id.

CHARACTERISTICS

-It is not possible to probe a person's list of friends.
-If someone is able to watch the HTTP traffic between servers they will be able
 to see RELIDs.
-Given the permanent nature of documents on the web, feeds may become archived
 if any RELID is made public. This is not a problem as long as OpenPGP remains
 unbreakable in practice. 
